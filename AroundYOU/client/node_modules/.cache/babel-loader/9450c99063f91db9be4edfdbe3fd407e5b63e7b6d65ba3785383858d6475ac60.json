{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport bcrypt from 'bcryptjs';\nexport const useSignup = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    email: \"\",\n    username: \"\",\n    role: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n  const [errors, setErrors] = useState({});\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const validateField = (name, value) => {\n    let fieldErrors = {};\n    switch (name) {\n      case \"email\":\n        fieldErrors.email = !/\\S+@\\S+\\.\\S+/.test(value) ? \"Invalid email address\" : \"\";\n        break;\n      case \"username\":\n        fieldErrors.username = value.trim().length < 3 ? \"Username too short\" : \"\";\n        break;\n      case \"password\":\n        fieldErrors.password = value.length < 8 ? \"Password must be at least 8 characters\" : \"\";\n        break;\n      case \"confirmPassword\":\n        fieldErrors.confirmPassword = value !== formData.password ? \"Passwords do not match\" : \"\";\n        break;\n      default:\n        break;\n    }\n    setErrors(prev => ({\n      ...prev,\n      ...fieldErrors\n    }));\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    validateField(name, value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n    const {\n      email,\n      username,\n      role,\n      password,\n      confirmPassword,\n      r\n    } = formData;\n\n    // Final validation before sending to backend\n    if (Object.values(errors).some(err => err)) {\n      setError(\"Please correct the errors in the form.\");\n      return;\n    }\n    if (password !== confirmPassword) {\n      setErrors(prev => ({\n        ...prev,\n        confirmPassword: \"Passwords do not match!\"\n      }));\n      return;\n    }\n    try {\n      const salt = await bcrypt.genSalt(10);\n      const hashedPassword = await bcrypt.hash(password, salt);\n      const response = await fetch(\"/api/add-user\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          username,\n          password: hashedPassword\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setSuccess(\"User registered successfully!\");\n        setFormData({\n          email: \"\",\n          username: \"\",\n          role: \"\",\n          password: \"\",\n          confirmPassword: \"\"\n        });\n        setErrors({});\n      } else {\n        setError(data.error || \"Something went wrong\");\n      }\n    } catch (err) {\n      setError(\"Server error\");\n    }\n  };\n  return {\n    formData,\n    error,\n    success,\n    errors,\n    handleChange,\n    handleSubmit,\n    setFormData,\n    setError,\n    setSuccess,\n    setErrors\n  };\n};\n_s(useSignup, \"UJTjNeIYk4xjCzYVz4nxy+qn22M=\");","map":{"version":3,"names":["useState","bcrypt","useSignup","_s","formData","setFormData","email","username","role","password","confirmPassword","errors","setErrors","error","setError","success","setSuccess","validateField","name","value","fieldErrors","test","trim","length","prev","handleChange","e","target","handleSubmit","preventDefault","r","Object","values","some","err","salt","genSalt","hashedPassword","hash","response","fetch","method","headers","body","JSON","stringify","data","json","ok"],"sources":["C:/Users/munee/OneDrive/Desktop/prod/MERN/AroundYOU/client/src/hooks/useSignup.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nexport const useSignup = () => {\r\n    const [formData, setFormData] = useState ({\r\n        email: \"\",\r\n        username: \"\",\r\n        role: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\"\r\n    });\r\n\r\n    const [errors, setErrors] = useState({});\r\n    const [error, setError] = useState(\"\");\r\n    const [success, setSuccess] = useState(\"\");\r\n     \r\n    const validateField = (name, value) => {\r\n\r\n        let fieldErrors = {};\r\n\r\n        switch (name) {\r\n\r\n            case \"email\":\r\n                fieldErrors.email = !/\\S+@\\S+\\.\\S+/.test(value) ? \"Invalid email address\" : \"\";\r\n                break;\r\n\r\n            case \"username\":\r\n\r\n                fieldErrors.username = value.trim().length < 3 ? \"Username too short\" : \"\";\r\n                break;\r\n\r\n            case \"password\":\r\n\r\n                fieldErrors.password = value.length < 8 ? \"Password must be at least 8 characters\" : \"\";\r\n                break;\r\n\r\n            case \"confirmPassword\":\r\n\r\n                fieldErrors.confirmPassword =\r\n                  value !== formData.password ? \"Passwords do not match\" : \"\";\r\n                break;\r\n\r\n            default:\r\n                break;\r\n\r\n        }\r\n\r\n        setErrors((prev) => ({\r\n            ...prev,\r\n            ...fieldErrors,\r\n        }));\r\n\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n\r\n        const {name, value} = e.target;\r\n\r\n        setFormData ((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n        }));\r\n\r\n        validateField(name, value);\r\n\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n\r\n        e.preventDefault();\r\n        setError(\"\");\r\n        setSuccess(\"\");\r\n        \r\n        const { email, username, role, password, confirmPassword, r } = formData;\r\n        \r\n        // Final validation before sending to backend\r\n        if (Object.values(errors).some((err) => err)) {\r\n            setError(\"Please correct the errors in the form.\");\r\n            return;\r\n        }\r\n        \r\n        if (password !== confirmPassword) {\r\n            setErrors((prev) => ({\r\n                ...prev,\r\n                confirmPassword: \"Passwords do not match!\",\r\n            }));\r\n            return;\r\n        }\r\n        \r\n        try {\r\n        \r\n            const salt = await bcrypt.genSalt(10);\r\n            const hashedPassword = await bcrypt.hash(password, salt);\r\n              \r\n            const response = await fetch(\"/api/add-user\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    },\r\n                body: JSON.stringify({ email, username, password: hashedPassword }),\r\n            });\r\n        \r\n            const data = await response.json();\r\n        \r\n            if (response.ok) {\r\n                setSuccess(\"User registered successfully!\");\r\n                setFormData({\r\n                    email: \"\",\r\n                    username: \"\",\r\n                    role:\"\",\r\n                    password: \"\",\r\n                    confirmPassword: \"\",\r\n                });\r\n                setErrors({});\r\n            } else {\r\n                setError(data.error || \"Something went wrong\");\r\n            }\r\n        } catch (err) {\r\n            setError(\"Server error\");\r\n        }\r\n    };\r\n\r\n    return {\r\n        formData,\r\n        error,\r\n        success,\r\n        errors,\r\n        handleChange,\r\n        handleSubmit,\r\n        setFormData,\r\n        setError,\r\n        setSuccess,\r\n        setErrors,\r\n    };\r\n    \r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}