{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport bcrypt from 'bcryptjs';\nexport const useSignup = () => {\n  _s();\n  const [errors, setErrors] = useState({});\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const validateField = (name, value) => {\n    let fieldErrors = {};\n    switch (name) {\n      case \"email\":\n        fieldErrors.email = !/\\S+@\\S+\\.\\S+/.test(value) ? \"Invalid email address\" : \"\";\n        break;\n      case \"username\":\n        fieldErrors.username = value.trim().length < 3 ? \"Username too short\" : \"\";\n        break;\n      case \"password\":\n        fieldErrors.password = value.length < 8 ? \"Password must be at least 8 characters\" : \"\";\n        break;\n      case \"confirmPassword\":\n        fieldErrors.confirmPassword = value !== formData.password ? \"Passwords do not match\" : \"\";\n        break;\n      default:\n        break;\n    }\n    setErrors(prev => ({\n      ...prev,\n      ...fieldErrors\n    }));\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    validateField(name, value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n    const {\n      email,\n      username,\n      password,\n      confirmPassword\n    } = formData;\n\n    // Final validation before sending to backend\n    if (Object.values(errors).some(err => err)) {\n      setError(\"Please correct the errors in the form.\");\n      return;\n    }\n    if (password !== confirmPassword) {\n      setErrors(prev => ({\n        ...prev,\n        confirmPassword: \"Passwords do not match\"\n      }));\n      return;\n    }\n    try {\n      const salt = await bcrypt.genSalt(10);\n      const hashedPassword = await bcrypt.hash(password, salt);\n      const response = await fetch(\"/api/add-user\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          username,\n          password: hashedPassword\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setSuccess(\"User registered successfully!\");\n        setFormData({\n          email: \"\",\n          username: \"\",\n          password: \"\",\n          confirmPassword: \"\"\n        });\n        setErrors({});\n      } else {\n        setError(data.error || \"Something went wrong\");\n      }\n    } catch (err) {\n      setError(\"Server error\");\n    }\n  };\n  return {\n    formData,\n    error,\n    success,\n    errors,\n    handleChange,\n    handleSubmit,\n    setFormData,\n    setError,\n    setSuccess,\n    setErrors\n  };\n};\n_s(useSignup, \"4RQRXhfak1Bu+EeTZUPYiqhj/Q4=\");","map":{"version":3,"names":["useState","bcrypt","useSignup","_s","errors","setErrors","error","setError","success","setSuccess","validateField","name","value","fieldErrors","email","test","username","trim","length","password","confirmPassword","formData","prev","handleChange","e","target","setFormData","handleSubmit","preventDefault","Object","values","some","err","salt","genSalt","hashedPassword","hash","response","fetch","method","headers","body","JSON","stringify","data","json","ok"],"sources":["C:/Users/munee/OneDrive/Desktop/prod/MERN/AroundYOU/client/src/hooks/useSignup.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport bcrypt from 'bcryptjs';\r\n\r\nexport const useSignup = () => {\r\n  const [errors, setErrors] = useState({});\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n\r\n  const validateField = (name, value) => {\r\n    let fieldErrors = {};\r\n\r\n    switch (name) {\r\n      case \"email\":\r\n        fieldErrors.email = !/\\S+@\\S+\\.\\S+/.test(value) ? \"Invalid email address\" : \"\";\r\n        break;\r\n      case \"username\":\r\n        fieldErrors.username = value.trim().length < 3 ? \"Username too short\" : \"\";\r\n        break;\r\n      case \"password\":\r\n        fieldErrors.password = value.length < 8 ? \"Password must be at least 8 characters\" : \"\";\r\n        break;\r\n      case \"confirmPassword\":\r\n        fieldErrors.confirmPassword =\r\n          value !== formData.password ? \"Passwords do not match\" : \"\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      ...fieldErrors,\r\n    }));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n\r\n    validateField(name, value);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    const { email, username, password, confirmPassword } = formData;\r\n\r\n    // Final validation before sending to backend\r\n    if (Object.values(errors).some((err) => err)) {\r\n      setError(\"Please correct the errors in the form.\");\r\n      return;\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        confirmPassword: \"Passwords do not match\",\r\n      }));\r\n      return;\r\n    }\r\n\r\n    try {\r\n\r\n      const salt = await bcrypt.genSalt(10);\r\n      const hashedPassword = await bcrypt.hash(password, salt);\r\n      \r\n      const response = await fetch(\"/api/add-user\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, username, password: hashedPassword }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSuccess(\"User registered successfully!\");\r\n        setFormData({\r\n          email: \"\",\r\n          username: \"\",\r\n          password: \"\",\r\n          confirmPassword: \"\",\r\n        });\r\n        setErrors({});\r\n      } else {\r\n        setError(data.error || \"Something went wrong\");\r\n      }\r\n    } catch (err) {\r\n      setError(\"Server error\");\r\n    }\r\n  };\r\n\r\n  return {\r\n    formData,\r\n    error,\r\n    success,\r\n    errors,\r\n    handleChange,\r\n    handleSubmit,\r\n    setFormData,\r\n    setError,\r\n    setSuccess,\r\n    setErrors,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}